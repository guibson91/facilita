{"version":3,"sources":["webpack:///./src/app/panel/pages/product/category-select/category-select.module.ts","webpack:///./src/app/panel/pages/product/category-select/category-select.page.html","webpack:///./src/app/panel/pages/product/category-select/category-select.page.scss","webpack:///./src/app/panel/pages/product/category-select/category-select.page.ts"],"names":[],"mappings":"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","file":"default~panel-pages-product-product-edit-product-edit-module~panel-pages-product-product-global-edit~8eeccd40.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { CategorySelectPage } from './category-select.page';\r\nimport { PanelComponentsModule } from '../../../components/panel-components.module';\r\nimport { GlobalComponentsModule } from '../../../../components/global-components.module';\r\nimport { NgPipesModule } from 'ngx-pipes';\r\nimport { PipesModule } from '../../../../pipes/pipes.module';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    PanelComponentsModule,\r\n    GlobalComponentsModule,\r\n    NgPipesModule,\r\n    PipesModule\r\n  ],\r\n  declarations: [CategorySelectPage],\r\n  entryComponents: [CategorySelectPage]\r\n})\r\nexport class CategorySelectPageModule { }\r\n","module.exports = \"<ion-content>\\r\\n  <ion-searchbar clear [(ngModel)]=\\\"searchString\\\" placeholder=\\\"Pesquisar\\\"></ion-searchbar>\\r\\n  <nano-loading [loading]=\\\"loading\\\">\\r\\n\\r\\n    <ion-list>\\r\\n      <ion-item class=\\\"remove-border-item\\\" no-lines no-padding padding-horizontal *ngFor=\\\"let category of categories | filterBy:['name', 'description']:searchString as categories\\\"\\r\\n        class=\\\"category-item\\\">\\r\\n        <h2 ion-text text-wrap>{{category.name}}</h2>\\r\\n        <div item-right class=\\\"actions\\\">\\r\\n          <ion-button fill=\\\"clear\\\" color=\\\"danger\\\" (click)=\\\"remove(category)\\\">\\r\\n            <ion-icon name=\\\"trash\\\"></ion-icon> Remover\\r\\n          </ion-button>\\r\\n          <ion-button (click)=\\\"edit(category)\\\" fill=\\\"clear\\\" color=\\\"proceed\\\">\\r\\n            <ion-icon name=\\\"md-create\\\"></ion-icon> Editar\\r\\n          </ion-button>\\r\\n          <ion-button fill=\\\"clear\\\" color=\\\"proceed\\\" (click)=\\\"dismiss(category)\\\">\\r\\n            <ion-icon name=\\\"md-checkmark\\\"></ion-icon> Selecionar\\r\\n          </ion-button>\\r\\n        </div>\\r\\n        <!--<div item-right>\\r\\n          <button ion-button icon-only clear (click)=\\\"toTop(category)\\\">\\r\\n            <ion-icon name=\\\"arrow-up\\\"></ion-icon>\\r\\n          </button>\\r\\n          <button ion-button icon-only clear (click)=\\\"toBottom(category)\\\">\\r\\n            <ion-icon name=\\\"arrow-down\\\"></ion-icon>\\r\\n          </button>\\r\\n        </div>-->\\r\\n      </ion-item>\\r\\n\\r\\n      <ion-item class=\\\"remove-border-item\\\" text-center padding *ngIf=\\\"!existsCategories\\\">\\r\\n        <p>Você não possui nenhuma categoria!</p>\\r\\n      </ion-item>\\r\\n    </ion-list>\\r\\n  </nano-loading>\\r\\n</ion-content>\\r\\n\\r\\n<ion-footer>\\r\\n  <ion-button fill=\\\"clear\\\" color=\\\"danger\\\" (click)=\\\"dismiss()\\\">\\r\\n    <ion-icon name=\\\"close\\\"></ion-icon> Cancelar\\r\\n  </ion-button>\\r\\n  <ion-button fill=\\\"clear\\\" color=\\\"proceed\\\" (click)=\\\"add()\\\">\\r\\n    <ion-icon name=\\\"add\\\"></ion-icon> Nova categoria\\r\\n  </ion-button>\\r\\n</ion-footer>\"","module.exports = \"ion-icon.icon {\\n  padding-right: 5px !important; }\\n\\nion-item.category-item .item-inner {\\n  border-bottom: solid 1px #dddddd !important; }\\n\\n@media (max-width: 400px) {\\n    ion-item.category-item .item-inner {\\n      display: flex;\\n      flex-direction: column; } }\\n\\nion-content.content {\\n  background: white; }\\n\\nion-searchbar {\\n  flex-grow: 1;\\n  border-bottom: solid 2px #dddddd; }\\n\\nion-footer.footer {\\n  display: flex;\\n  justify-content: flex-end;\\n  background: var(--ion-color-light); }\\n\\n.category-item .item-inner {\\n  padding-right: 0px !important; }\\n\\n.actions {\\n  margin-right: 0px !important; }\\n\"","import { Component, Input, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\r\nimport { Category } from '../../../../../models/category';\r\nimport { Product } from '../../../../../models/product';\r\nimport { Observable, of, Subscription, } from 'rxjs';\r\nimport { map, flatMap } from 'rxjs/operators';\r\nimport { Company } from '../../../../../models/company';\r\nimport { AlertController, ModalController } from '@ionic/angular';\r\nimport { SystemService } from '../../../../services/system.service';\r\nimport { SharedService } from '../../../../services/shared.service';\r\nimport { FilialType } from '../../../../../models/filial';\r\n\r\n@Component({\r\n  selector: 'app-category-select',\r\n  templateUrl: './category-select.page.html',\r\n  styleUrls: ['./category-select.page.scss'],\r\n})\r\nexport class CategorySelectPage implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * String de busca\r\n   */\r\n  searchString: string\r\n\r\n  /** \r\n   * Carregando\r\n   */\r\n  loading: boolean\r\n\r\n  /**\r\n   * Lista de categorias\r\n   */\r\n  categories: Category[]\r\n\r\n  /**\r\n   * Subscription das categories\r\n   */\r\n  categoriesSubscription: Subscription\r\n\r\n  /**\r\n   * Se existe categorias\r\n   */\r\n  existsCategories: boolean\r\n\r\n  /**\r\n   * Id da empresa\r\n   */\r\n  @Input()\r\n  company: Company\r\n\r\n  //Categoria Atual\r\n  @Input()\r\n  categoryActual: Category;\r\n\r\n  // Se a categoria é global ou não\r\n  global: boolean;\r\n\r\n  // Se a categoria for global, qual tipo deve ser criado. Por hora apenas o tipo WAREHOUSE(Depósito) é aceito\r\n  type: FilialType = FilialType.WAREHOUSE;\r\n\r\n  constructor(public shared: SharedService,\r\n    public alertCtrl: AlertController,\r\n    public system: SystemService,\r\n    private ref: ChangeDetectorRef,\r\n    public modalCtrl: ModalController) { }\r\n\r\n  ngOnInit() {\r\n    if (this.company && this.global) {\r\n      throw Error(\"Uma categoria não pode ser global e pertencer a uma empresa ao mesmo tempo\")\r\n    }\r\n    this.load()\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.categoriesSubscription) this.categoriesSubscription.unsubscribe()\r\n  }\r\n\r\n  /**\r\n   * Carregando as categorias atuais.\r\n   * Marcando como carregando e quando acabar de carregar marcar se existe categorias.\r\n   */\r\n  load(): void {\r\n    this.loading = true\r\n    this.existsCategories = true\r\n    this.ref.detectChanges();\r\n    if (this.categoriesSubscription) this.categoriesSubscription.unsubscribe()\r\n\r\n    let categories$: Observable<Category[]>;\r\n\r\n    if (this.global) {\r\n      categories$ = Category.list([{\r\n        name: 'type',\r\n        operator: '==',\r\n        value: FilialType.WAREHOUSE\r\n      }])\r\n    } else {\r\n      categories$ = Company.categories.list(this.company.id, undefined, [{ name: \"priority\" }])\r\n    }\r\n    // Lista de categorias ordenadas pela prioridade\r\n    this.categoriesSubscription = categories$.subscribe((categories: Category[]) => {\r\n      this.categories = categories;\r\n      this.loading = false;\r\n      this.ref.detectChanges()\r\n      if (this.categories && this.categories.length === 0) {\r\n        this.existsCategories = false;\r\n      } else {\r\n        this.categories.sort((a: Category, b: Category) => {\r\n          return ((a.priority || 0) - (b.priority || 0));\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adiciona uma nova categoria por meio de um alert que pergunta o nome\r\n   */\r\n  async add() {\r\n\r\n    //console.log(\"NOVA PRIORIDADE: \", this.categories.length)\r\n    let alert = await this.alertCtrl.create({\r\n      header: 'Criar categoria',\r\n      inputs: [\r\n        {\r\n          name: 'name',\r\n          placeholder: 'Nome da categoria'\r\n        }\r\n      ],\r\n      buttons: [\r\n        {\r\n          text: 'Cancel'\r\n        },\r\n        {\r\n          text: 'Criar',\r\n          handler: data => {\r\n            // Verifica se foi preenchido algum valor no input do alerta\r\n            if (!data || !data.name) return\r\n            this.loading = true\r\n\r\n            let add$: Observable<string>;\r\n            // Se for uma categoria de tipo global\r\n            if (this.global) {\r\n              add$ = Category.add<Category>({\r\n                name: data.name,\r\n                priority: this.categories.length,\r\n                type: this.type,\r\n                global: true\r\n              })\r\n            } else { // Se for uma categoria de uma empresa\r\n              add$ = Category.add<Category>({ name: data.name, priority: this.categories.length }, [\r\n                {\r\n                  relationship: Category.company,\r\n                  id: this.company.id\r\n                }\r\n              ])\r\n            }\r\n\r\n            add$.subscribe(() => {\r\n              this.load()\r\n            }, err => {\r\n              this.system.showErrorAlert(err)\r\n            })\r\n          }\r\n        }\r\n      ]\r\n    })\r\n    alert.present()\r\n  }\r\n\r\n  /**\r\n   * Edita o nome de uma categoria por meio de um nome\r\n   * @param category Categoria a ser editada\r\n   */\r\n  async edit(category: Category) {\r\n    let alert = await this.alertCtrl.create({\r\n      header: 'Editar',\r\n      inputs: [\r\n        {\r\n          name: 'name',\r\n          value: category.name\r\n        }\r\n      ],\r\n      buttons: [\r\n        {\r\n          text: 'Cancel'\r\n        },\r\n        {\r\n          text: 'Salvar',\r\n          handler: data => {\r\n            // Verifica se foi preenchido algum valor no input do alerta\r\n            if (!data || !data.name) return\r\n            this.loading = true\r\n            Category.update<Category>(category.id, { name: data.name })\r\n              .subscribe(() => {\r\n                this.load()\r\n              }, err => {\r\n                this.system.showErrorAlert(err)\r\n              })\r\n          }\r\n        }\r\n      ]\r\n    })\r\n    alert.present()\r\n  }\r\n\r\n  /**\r\n   * Tenta remover uma categoria. Mas só remove se ela não possuir produtos\r\n   * @param category Categoria a ser removida\r\n   */\r\n  async remove(category: Category) {\r\n    let alert = await this.alertCtrl.create({\r\n      header: 'Tem certeza que deseja remover essa categoria?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar'\r\n        },\r\n        {\r\n          text: 'Remover',\r\n          handler: data => {\r\n            this.loading = true\r\n            this.existsProductsCategory(category)\r\n              .pipe(flatMap((exists_products) => {\r\n                if (exists_products) {\r\n                  throw Error(\"Não pode ser removido categoria que possui produtos\")\r\n                }\r\n\r\n                let relationships = [];\r\n                // Se a categoria pertence a uma empresa\r\n                if (this.company) {\r\n                  relationships = [\r\n                    {\r\n                      relationship: Category.company,\r\n                      id: this.company.id\r\n                    }\r\n                  ]\r\n                }\r\n\r\n                return Category.remove(category.id, relationships)\r\n              }))\r\n              .subscribe(() => {\r\n                this.load()\r\n              }, err => {\r\n                this.loading = false\r\n                this.ref.detectChanges()\r\n                this.system.showErrorAlert(err)\r\n              })\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    alert.present()\r\n  }\r\n\r\n  /**\r\n   * Verifica se existe algum produto relacionado a uma categoria\r\n   * @param category Será buscado os produtos dessa categoria\r\n   */\r\n  existsProductsCategory(category: Category): Observable<boolean> {\r\n\r\n    //Verifica primeiro se a categoria que quer ser removida faz parte do produto atual (que ainda não foi salvo no DB)\r\n    if (this.categoryActual && category.id == this.categoryActual.id) return of(true);\r\n\r\n    return Category.category_product.list(category.id)\r\n      .pipe(map((products: Product[]) => {\r\n        if (products && products.length > 0) return true\r\n        else return false\r\n      }))\r\n  }\r\n\r\n  /**\r\n   * Fecha o modal. Podendo passar ou não uma categoria selecionada\r\n   * @param category Categoria que pode ser mandado para view que chamou o modal\r\n   */\r\n  dismiss(category?: Category) {\r\n    this.modalCtrl.dismiss({\r\n      category: category\r\n    })\r\n  }\r\n\r\n}"],"sourceRoot":""}