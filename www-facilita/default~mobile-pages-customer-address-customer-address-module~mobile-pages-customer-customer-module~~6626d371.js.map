{"version":3,"sources":["webpack:///./src/app/services/product.service.ts"],"names":[],"mappings":"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","file":"default~mobile-pages-customer-address-customer-address-module~mobile-pages-customer-customer-module~~6626d371.js","sourcesContent":["import { Company } from '../../models/company';\r\nimport { Category } from '../../models/category';\r\nimport { Injectable } from '@angular/core';\r\nimport { Product } from '../../models/product';\r\nimport { Observable, of, combineLatest } from 'rxjs';\r\nimport { map, flatMap, switchMap } from 'rxjs/operators';\r\nimport { Filial, FilialType } from '../../models/filial';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Busca uma lista de produtos de uma empresa.\r\n   * Gerando Produtos com:\r\n   * Atributos do produto. Categoria do produto.\r\n   * @param id_company Id da empresa\r\n   */\r\n  public getProductsStockCompany(id_company: string): Observable<ProductStock[]> {\r\n    return Company.categories.list(id_company)\r\n      // Todas as categorias\r\n      .pipe(flatMap((categories: Category[]) => {\r\n        return Company.products.list(id_company)\r\n          // Todos os produtos\r\n          .pipe(map((products: Product[]) => {\r\n            // Informações sobre o relacionamento da filial com os produtos\r\n            let id_category_to_category = {}\r\n            for (let category of categories) {\r\n              id_category_to_category[category.id] = category\r\n            }\r\n            // Elementos usados no estoque\r\n            let product_stock: ProductStock[] = []\r\n            // Para todos os produtos verificar as informações do relacionamento\r\n            for (let product of products) {\r\n              product_stock.push({\r\n                ...product,\r\n                category: id_category_to_category[product.category.id],\r\n              })\r\n            }\r\n            return product_stock\r\n          }))\r\n      }))\r\n  }\r\n\r\n  /**\r\n   * Busca uma lista de produtos globais do tipo de uma empresa.\r\n   * Gerando Produtos com:\r\n   * Atributos do produto. Categoria do produto.\r\n   * @param id_company Id da empresa\r\n   */\r\n  public getProductsStockGlobal(type: FilialType): Observable<ProductStock[]> {\r\n    if (!type) return of([])\r\n    return Category.list([{ name: 'type', operator: '==', value: type }])\r\n      // Todas as categorias\r\n      .pipe(flatMap((categories: Category[]) => {\r\n        return Product.list([{ name: 'global.type', operator: '==', value: type }])\r\n          // Todos os produtos\r\n          .pipe(map((products: Product[]) => {\r\n            // Mapa para relacionar o ID da categoria para a categoria\r\n            let id_category_to_category = {}\r\n            for (let category of categories) {\r\n              id_category_to_category[category.id] = category\r\n            }\r\n            // Elementos usados no estoque\r\n            let product_stock: ProductStock[] = []\r\n            // Para todos os produtos verificar as informações do relacionamento\r\n            for (let product of products) {\r\n              product_stock.push({\r\n                ...product,\r\n                category: id_category_to_category[product.category.id],\r\n              })\r\n            }\r\n            return product_stock\r\n          }))\r\n      }))\r\n  }\r\n\r\n  /**\r\n   * Busca uma lista de produtos de uma filial. E produtos globais que pertencem a uma filial.\r\n   * Adiciona nessa lista de produtos as informações do relacionamento.\r\n   * Gerando Produtos com:\r\n   * Atributos do produto. Categoria do produto.\r\n   * Se active true então existe o relacionamento com a filial. Se false não existe relacionamento do produto com a filial.\r\n   * Demais atributos diretos do relacionamento Filial.product_stock\r\n   * @param id_filial Id da filial\r\n   */\r\n  public getProductsStockFilial(filial: Filial): Observable<ProductStock[]> {\r\n    return combineLatest([\r\n      this.getProductsStockCompany(filial.company.id),\r\n      this.getProductsStockGlobal(filial.type)\r\n    ])\r\n      .pipe(map((products_stock: ProductStock[][]) => {\r\n        return [].concat(products_stock[0], products_stock[1])\r\n      }))\r\n      .pipe(switchMap((products_stock: ProductStock[]) => {\r\n        // Informações sobre o relacionamento da filial com os produtos\r\n        return Filial.product_stock.listRelation(filial.id)\r\n          .pipe(map((objs) => {\r\n            // Criando um mapa de id produto para informações do relacionamento da filial com o produto\r\n            let id_product_to_relationship = {}\r\n            for (let obj of objs) {\r\n              id_product_to_relationship[obj.id] = obj\r\n            }\r\n\r\n            // Para todos os produtos verificar as informações do relacionamento\r\n            for (let product of products_stock) {\r\n              // Se existir o relacionamento do produto com a filial\r\n              if (id_product_to_relationship[product.id]) {\r\n                product.active = (id_product_to_relationship[product.id].active === undefined ? true : id_product_to_relationship[product.id].active)\r\n                product.priority = id_product_to_relationship[product.id].priority\r\n                product.recomendation = id_product_to_relationship[product.id].recomendation\r\n                product.recomendation_priority = id_product_to_relationship[product.id].recomendation_priority\r\n              } else {\r\n                product.active = false;\r\n              }\r\n              // Se não existir o relacionamento do produto com a filial\r\n            }\r\n            return products_stock\r\n          }))\r\n      }))\r\n  }\r\n\r\n  /**\r\n   * Retorna a melhor recomendação de uma filial\r\n   * @param filial Filial no qual será realizado a busca\r\n   */\r\n  public getBestRecomendation(filial: Filial): Observable<Product> {\r\n    return Filial.product_stock\r\n      .list(filial.id, [{ name: \"recomendation\", operator: \"==\", value: true }], undefined)\r\n      .pipe(map((products_stock: ProductStock[]) => {\r\n        let recomendationProductsStock = products_stock\r\n          .sort(this.comparatorProductStockByRecomendation)\r\n        return recomendationProductsStock[0];\r\n      }))\r\n  }\r\n\r\n  /**\r\n   * Comparador para ordenar os produtos do estoque baseado na prioridade da recomendação\r\n   * @param a Produto Estoque\r\n   * @param b Produto Estoque\r\n   */\r\n  public comparatorProductStockByRecomendation(a: ProductStock, b: ProductStock) {\r\n    let p1: number = a.recomendation_priority ? a.recomendation_priority : 0;\r\n    let p2: number = b.recomendation_priority ? b.recomendation_priority : 0;\r\n    return p2 - p1\r\n  }\r\n\r\n  /**\r\n   * Comparador para ordenar os produtos do estpoque baseado na prioridade de sua categoria.\r\n   * Se a categoria for igual ordenar pela prioridade do produto em relação ao relacionamento com a filial.\r\n   * @param a Produto Estoque\r\n   * @param b Produto Estoque\r\n   */\r\n  public comparatorProductStock(a: ProductStock, b: ProductStock) {\r\n    if (!a.category) { console.warn(\"Produto sem categoria\", a); return 1; }\r\n    if (!b.category) { console.warn(\"Produto sem categoria\", b); return -1; }\r\n    let cat_pri_p1: number = (a.category.priority === undefined ? 0 : a.category.priority)\r\n    let cat_pri_p2: number = (b.category.priority === undefined ? 0 : b.category.priority)\r\n    let cat_id_p1: string = (a.category.id === undefined ? '' : a.category.id)\r\n    let cat_id_p2: string = (b.category.id === undefined ? '' : b.category.id)\r\n    let id_p1: string = (a.id === undefined ? '' : a.id)\r\n    let id_p2: string = (b.id === undefined ? '' : b.id)\r\n    let pri_p1: number = (a.priority === undefined ? 0 : a.priority)\r\n    let pri_p2: number = (b.priority === undefined ? 0 : b.priority)\r\n\r\n    if (cat_pri_p1 === cat_pri_p2) {\r\n      if (cat_id_p1 === cat_id_p2) {\r\n        if (pri_p1 === pri_p2) {\r\n          if (id_p1 === id_p2) {\r\n            return 0\r\n          } else {\r\n            return id_p1 > id_p2 ? -1 : 1\r\n          }\r\n        } else {\r\n          return pri_p1 > pri_p2 ? -1 : 1\r\n        }\r\n      } else {\r\n        return cat_id_p1 > cat_id_p2 ? -1 : 1\r\n      }\r\n    } else {\r\n      return cat_pri_p1 < cat_pri_p2 ? -1 : 1\r\n    }\r\n  }\r\n}\r\n\r\n// export type ProductMenu = (\r\n//   Product & {\r\n//     category: Category\r\n\r\n//     recomendation?: boolean\r\n//     recomendation_priority?: number\r\n//     priority?: number\r\n\r\n//     active?: boolean\r\n//   });\r\n\r\nexport type ProductStock = (\r\n  Product & {\r\n    category: Category\r\n\r\n    recomendation?: boolean\r\n    recomendation_priority?: number\r\n    priority?: number\r\n\r\n    active?: boolean\r\n  });"],"sourceRoot":""}