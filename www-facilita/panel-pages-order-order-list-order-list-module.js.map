{"version":3,"sources":["webpack:///./src/app/panel/pages/order/order-list/order-list.module.ts","webpack:///./src/app/panel/pages/order/order-list/order-list.page.html","webpack:///./src/app/panel/pages/order/order-list/order-list.page.scss","webpack:///./src/app/panel/pages/order/order-list/order-list.page.ts"],"names":[],"mappings":"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","file":"panel-pages-order-order-list-order-list-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MomentModule } from 'ngx-moment';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { OrderListPage } from './order-list.page';\r\nimport { PanelComponentsModule } from '../../../components/panel-components.module';\r\nimport { GlobalComponentsModule } from '../../../../components/global-components.module';\r\nimport { NgPipesModule } from 'ngx-pipes';\r\nimport { PipesModule } from '../../../../pipes/pipes.module';\r\nimport { OrderDetailPage } from '../order-detail/order-detail.page';\r\nimport { OrderDetailPageModule } from '../order-detail/order-detail.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: OrderListPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    PanelComponentsModule,\r\n    GlobalComponentsModule,\r\n    NgPipesModule,\r\n    PipesModule,\r\n    MomentModule,\r\n    RouterModule.forChild(routes),\r\n    OrderDetailPageModule\r\n  ],\r\n  declarations: [\r\n    OrderListPage\r\n  ]\r\n})\r\nexport class OrderListPageModule { }\r\n","module.exports = \"<ion-header no-border>\\r\\n  <nano-navbar title=\\\"Pedidos\\\" icon=\\\"menus-icon-list\\\">\\r\\n  </nano-navbar>\\r\\n  <ion-toolbar color=\\\"primary\\\">\\r\\n    <div scrollX=\\\"true\\\">\\r\\n      <ion-segment [(ngModel)]=\\\"segment_value\\\" class=\\\"segment\\\" (ionChange)=\\\"change()\\\">\\r\\n        <ion-segment-button [value]=\\\"'all'\\\">\\r\\n          <h4>Todos</h4>\\r\\n        </ion-segment-button>\\r\\n        <ion-segment-button [value]=\\\"orderStatus.created\\\">\\r\\n          <h4>Solicitado</h4>\\r\\n        </ion-segment-button>\\r\\n        <ion-segment-button [value]=\\\"orderStatus.accepted\\\">\\r\\n          <h4>Aceito</h4>\\r\\n        </ion-segment-button>\\r\\n        <ion-segment-button [value]=\\\"orderStatus.delivery\\\">\\r\\n          <h4>Entrega</h4>\\r\\n        </ion-segment-button>\\r\\n        <ion-segment-button [value]=\\\"orderStatus.done\\\">\\r\\n          <h4>Concluído</h4>\\r\\n        </ion-segment-button>\\r\\n      </ion-segment>\\r\\n    </div>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <card-filial-open></card-filial-open>\\r\\n  <ion-card class=\\\"content-card\\\" margin>\\r\\n    <div class=\\\"search-order-list\\\">\\r\\n      <ion-searchbar [(ngModel)]=\\\"input_search\\\" (ionChange)=\\\"change()\\\" placeholder=\\\"Filtrar pelo cliente ou filial\\\">\\r\\n      </ion-searchbar>\\r\\n      <ion-item class=\\\"date-filter\\\">\\r\\n\\r\\n        <ion-label stacked class=\\\"label-date\\\">Data\\r\\n          <div class=\\\"filter-dates-modes\\\">\\r\\n            <p (click)=\\\"changeModeFilterDate('day')\\\" [ngClass]=\\\"{'active-mode-filter-date': modeFilterDate == 'day'}\\\"\\r\\n              padding-horizontal>\\r\\n              <strong>Dia</strong>\\r\\n            </p>\\r\\n            <p (click)=\\\"changeModeFilterDate('month')\\\" [ngClass]=\\\" { 'active-mode-filter-date': modeFilterDate=='month' }\\\"\\r\\n              class=\\\"mode-filter-month\\\">\\r\\n              <strong>Mês</strong>\\r\\n            </p>\\r\\n          </div>\\r\\n        </ion-label>\\r\\n\\r\\n        <ion-datetime *ngIf=\\\"modeFilterDate == 'month'\\\" displayFormat=\\\"MM/YYYY\\\" [(ngModel)]=\\\"dateInput\\\" (ionChange)=\\\"changeOrders()\\\"></ion-datetime>\\r\\n        <ion-datetime *ngIf=\\\"modeFilterDate == 'day'\\\" displayFormat=\\\"DD/MM/YYYY\\\" [(ngModel)]=\\\"dateInput\\\" (ionChange)=\\\"changeOrders()\\\"></ion-datetime>\\r\\n      </ion-item>\\r\\n    </div>\\r\\n    <ion-list>\\r\\n      <div *ngFor=\\\"let order of orders | filterBy:['status']:( segment_value == 'all' ? null : segment_value ) |\\r\\n               filterBy:[ 'payment_method', 'user_full.name', 'filial_full.name', 'code', 'user_full?.phone']: input_search ; let i = index\\\"\\r\\n        class=\\\"order\\\" padding>\\r\\n        <h6>\\r\\n          <span *ngIf=\\\"order.code\\\"><strong>Código: </strong>{{order.code}} </span>\\r\\n          <span *ngIf=\\\"order.filial_full?.name\\\"><strong>Filial: </strong>{{order.filial_full?.name}} </span>\\r\\n          <span *ngIf=\\\"order.user_full?.phone\\\"><strong>Phone: </strong>\\r\\n            <ion-icon class=\\\"icon-phone\\\" name=\\\"md-call\\\" item-start></ion-icon>{{order.user_full.phone}}\\r\\n          </span>\\r\\n          <span *ngIf=\\\"order.user_full?.name\\\"><strong>Cliente: </strong>{{order.user_full?.name}} </span>\\r\\n          <ion-button style=\\\"padding-top: 5px\\\" color=\\\"danger\\\" fill=\\\"clear\\\" (click)=\\\"reportUser(order.user_full)\\\" class=\\\"button-alert\\\">\\r\\n            <ion-icon name=\\\"alert\\\"></ion-icon> denunciar cliente\\r\\n          </ion-button>\\r\\n        </h6>\\r\\n        <div class=\\\"infos\\\">\\r\\n          <div class=\\\"entry\\\">\\r\\n            <p *ngFor=\\\"let entry of order.entries\\\">\\r\\n              {{entry.quantity}}x {{entry.product.name}}\\r\\n            </p>\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"presentModal(order)\\\" class=\\\"more\\\" expand=\\\"block\\\">Mais detalhes</ion-button>\\r\\n          </div>\\r\\n          <div class=\\\"delivery\\\">\\r\\n            <p text-wrap no-margin><strong>Endereço de entrega:</strong></p>\\r\\n            <p text-wrap no-margin>\\r\\n              {{order.location?.district || \\\"sem bairro\\\"}}, {{order.location?.city || \\\"sem cidade\\\"}} -\\r\\n              {{order.location?.state_short || \\\"sem estado\\\"}}\\r\\n            </p>\\r\\n            <p *ngIf=\\\"order?.location?.street && order?.location?.number\\\" text-wrap no-margin>\\r\\n              {{order.location.street}}, {{order.location.number}}.\\r\\n            </p>\\r\\n            <p *ngIf=\\\"order?.location?.complement\\\" text-wrap no-margin>\\r\\n              <strong>Complemento: </strong>{{order.location.complement}}\\r\\n            </p>\\r\\n            <p *ngIf=\\\"order?.location?.landmark\\\" text-wrap no-margin>\\r\\n              <strong>Ponto de referência: </strong>{{order.location.landmark}}\\r\\n            </p>\\r\\n            <p text-wrap class=\\\"total\\\">\\r\\n              <b>Total:</b> {{order.price.subtotal + order.price.delivery - ( order.price.discounts\\r\\n              || 0 ) | noNegative | currency:'BRL':'symbol':'1.2'}}</p>\\r\\n            <p text-wrap no-margin>\\r\\n              <b>Forma de pagamento:</b>\\r\\n              <span [ngSwitch]=\\\"order.payment_method\\\">\\r\\n                <span *ngSwitchCase=\\\"'debit_card'\\\">\\r\\n                  Débito\\r\\n                  <span> | {{order.payment_cardType}} </span>\\r\\n                </span>\\r\\n                <span *ngSwitchCase=\\\"'credit_card'\\\">\\r\\n                  Crédito\\r\\n                  <span> | {{order.payment_cardType}} </span>\\r\\n                </span>\\r\\n                <span *ngSwitchCase=\\\"'money'\\\">\\r\\n                  Dinheiro\\r\\n                  <span *ngIf=\\\"order.change\\\">, troco para: {{order.change | number: '1.2-2'}} </span>\\r\\n                </span>\\r\\n                <span *ngSwitchCase=\\\"'food_stamps'\\\">\\r\\n                  Vale-Alimentação\\r\\n                  <span> | {{order.payment_cardType}} </span>\\r\\n                </span>\\r\\n                <span *ngSwitchDefault>Outro</span>\\r\\n              </span>\\r\\n            </p>\\r\\n          </div>\\r\\n          <div class=\\\"status-box\\\">\\r\\n            <!-- <p>{{order.created_at | date:'HH:mm'}}</p> -->\\r\\n            <!-- <p class=\\\"label-day\\\">{{getLabelDay(order.created_at | date:'dd/MM/yyyy')}}</p> -->\\r\\n            <p class=\\\"label-day\\\">Aberto {{order.created_at | timestampToDate | amTimeAgo}}</p>\\r\\n            <div *ngIf=\\\"order.status === orderStatus.created\\\">\\r\\n              <p class=\\\"status\\\" style=\\\"color: #f1c40f\\\">Solicitado</p>\\r\\n              <p>Você deseja aceitar ou recusar o pedido?</p>\\r\\n              <div class=\\\"status-buttons\\\">\\r\\n                <ion-button (click)=\\\"changeStatus(order)\\\" color=\\\"success\\\">Aceitar</ion-button>\\r\\n                <ion-button (click)=\\\"refusedChangeStatus(order)\\\" color=\\\"danger\\\">Recusar</ion-button>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"order.status === orderStatus.accepted\\\">\\r\\n              <p class=\\\"status\\\" style=\\\"color: #2196F3\\\">Aceito</p>\\r\\n              <p>O pedido já saiu para entrega?</p>\\r\\n              <ion-button (click)=\\\"changeStatus(order)\\\" color=\\\"facebook\\\">Saiu para entrega</ion-button>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"order.status === orderStatus.delivery\\\">\\r\\n              <p class=\\\"status\\\" style=\\\"color: #2bde9f\\\">Saiu para Entrega</p>\\r\\n              <p>O cliente já recebeu o pedido?</p>\\r\\n              <ion-button (click)=\\\"changeStatus(order)\\\" color=\\\"success\\\">Concluir</ion-button>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"order.status === orderStatus.done\\\">\\r\\n              <p class=\\\"status\\\" style=\\\"color: rgb(117, 170, 57)\\\">Concluído</p>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"order.status === orderStatus.refused\\\">\\r\\n              <p class=\\\"status\\\" style=\\\"color: #bf0500\\\">Recusado</p>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"order.status === orderStatus.away\\\">\\r\\n              <p class=\\\"status\\\" style=\\\"color: #bf0500\\\">Pedido expirou</p>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"order.status === orderStatus.incomplete\\\">\\r\\n              <p class=\\\"status\\\" style=\\\"color: #bf0500\\\">Pedido incompleto</p>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <ion-item text-center padding *ngIf=\\\"!loading\\\" class=\\\"noOrders\\\">\\r\\n        <p ion-text>Você ainda não possui nenhum pedido</p>\\r\\n      </ion-item>\\r\\n    </ion-list>\\r\\n    <ion-item text-center *ngIf=\\\"loading\\\">\\r\\n      <ion-spinner></ion-spinner>\\r\\n    </ion-item>\\r\\n\\r\\n  </ion-card>\\r\\n</ion-content>\"","module.exports = \"ion-card.content-card {\\n  margin: 10px !important; }\\n\\n.toolbar {\\n  padding: 0; }\\n\\nion-scroll {\\n  height: 60px; }\\n\\nion-scroll .scroll-content {\\n    padding: 18px 0 !important; }\\n\\nion-scroll .segment {\\n    display: block;\\n    white-space: nowrap;\\n    font-size: 0;\\n    overflow: auto; }\\n\\nion-scroll .segment::-webkit-scrollbar {\\n      width: 0;\\n      height: 0;\\n      display: none; }\\n\\nion-scroll .segment ion-segment-button.segment-button {\\n      display: inline-block;\\n      min-width: 100px;\\n      padding: 0 25px;\\n      width: auto;\\n      color: #fff;\\n      border-bottom-color: transparent; }\\n\\nion-scroll .segment ion-segment-button.segment-button h4 {\\n        padding-top: 10px;\\n        font-size: 16px;\\n        font-weight: bold;\\n        margin: 0; }\\n\\nion-scroll .segment ion-segment-button.segment-button.segment-activated {\\n        border-color: #fff; }\\n\\n.button-alert {\\n  font-size: 10px;\\n  margin-top: -0.8em; }\\n\\n.noOrders {\\n  display: none; }\\n\\n.noOrders:first-child {\\n    display: block !important; }\\n\\n.date-filter {\\n  width: 300px; }\\n\\n@media (max-width: 420px) {\\n    .date-filter {\\n      width: 100%; } }\\n\\n.date-filter .item-inner {\\n    border-bottom: 1px solid var(--ion-color-primary) !important; }\\n\\n.date-filter .label-date {\\n    display: flex;\\n    justify-content: space-between; }\\n\\n.date-filter .label-date .filter-dates-modes {\\n      z-index: 999;\\n      display: flex !important; }\\n\\n.date-filter .label-date .filter-dates-modes p {\\n        margin: 0px; }\\n\\n.date-filter .label-date .filter-dates-modes p:hover {\\n          cursor: pointer; }\\n\\n.date-filter .label-date .filter-dates-modes p.mode-filter-month {\\n          margin-left: 5px !important; }\\n\\n.date-filter .label-date .filter-dates-modes p.active-mode-filter-date {\\n          color: var(--ion-color-primary) !important; }\\n\\n@media (max-width: 420px) {\\n  .content-card {\\n    margin: 10px !important; } }\\n\\n.search-order-list {\\n  display: flex;\\n  align-items: center;\\n  flex-wrap: wrap;\\n  border-bottom: solid 2px #dddddd; }\\n\\n.search-order-list ion-item {\\n    padding-bottom: 5px; }\\n\\n.search-order-list .datetime-md {\\n    padding: 7px 8px 7px 0px !important; }\\n\\n.search-order-list ion-searchbar {\\n    border-bottom: solid 0px transparent !important;\\n    height: 73px;\\n    width: 70%;\\n    min-width: 330px; }\\n\\n@media (max-width: 500px) {\\n      .search-order-list ion-searchbar {\\n        width: 100%; } }\\n\\n.search-order-list .date-filter {\\n    width: 30%; }\\n\\n@media (max-width: 520px) {\\n      .search-order-list .date-filter {\\n        width: 100%; } }\\n\\n.searchbar-input {\\n  padding-right: 6px !important; }\\n\\n.order {\\n  border-bottom: 1px solid lightgrey; }\\n\\n.order h2 span {\\n    margin-right: 20px; }\\n\\n@media (max-width: 420px) {\\n    .order .info-order {\\n      display: flex;\\n      flex-direction: column; } }\\n\\n.order .more {\\n    text-align: left !important;\\n    cursor: pointer;\\n    color: var(--ion-color-primary);\\n    width: auto !important;\\n    margin-left: -5px; }\\n\\n@media (max-width: 625px) {\\n    .order .more {\\n      margin: 0 auto;\\n      margin-top: 8px; } }\\n\\n.order .infos {\\n    display: flex; }\\n\\n@media (max-width: 625px) {\\n      .order .infos {\\n        flex-direction: column;\\n        align-items: center;\\n        justify-content: space-between; }\\n        .order .infos .datetime-md {\\n          padding: 2px 8px 5px 0px !important; } }\\n\\n.order .infos .entry {\\n      width: 35%; }\\n\\n@media (max-width: 625px) {\\n        .order .infos .entry {\\n          width: 100% !important;\\n          max-width: 100%; } }\\n\\n.order .infos .delivery {\\n      width: 36.69%; }\\n\\n@media (max-width: 625px) {\\n        .order .infos .delivery {\\n          width: 100% !important;\\n          max-width: 100%; } }\\n\\n@media (max-width: 625px) {\\n        .order .infos .delivery .phone {\\n          width: 100%;\\n          text-align: center;\\n          display: inline-block;\\n          margin: 0; } }\\n\\n.order .infos .delivery .total {\\n        margin-top: 10px; }\\n\\n.order .infos .status-box {\\n      width: 27.3%; }\\n\\n@media (max-width: 625px) {\\n        .order .infos .status-box {\\n          width: 100% !important;\\n          max-width: 100%; } }\\n\\n.order .infos .status-box .status {\\n        font-size: 1.3em;\\n        font-weight: bold; }\\n\"","import { Component, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport { Observable, of, combineLatest, Subscription } from 'rxjs';\r\nimport { Order, OrderStatus } from '../../../../../models/order';\r\nimport { NavController, MenuController, AlertController, ModalController, LoadingController, ToastController } from '@ionic/angular';\r\nimport { AuthenticationService } from '../../../../services/authentication.service';\r\nimport { SharedService } from '../../../../services/shared.service';\r\nimport { SystemService } from '../../../../services/system.service';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { Company } from '../../../../../models/company';\r\nimport { switchMap, first, flatMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { User } from '../../../../../models/user';\r\nimport { Filial } from '../../../../../models/filial';\r\nimport { firestore } from \"firebase\"\r\nimport { OrderDetailPage } from '../order-detail/order-detail.page';\r\nimport \"firebase/firestore\"\r\n\r\n//Definindo calendário (pipe amCalendar)\r\nmoment.updateLocale('pt-br', {\r\n  calendar: {\r\n    lastDay: '[Ontem]',\r\n    sameDay: '[Hoje]',\r\n    nextDay: '[Amanhã]',\r\n    lastWeek: 'dddd',\r\n    nextWeek: '[Próxima] dddd',\r\n    sameElse: 'DD/MM/YYYY'\r\n  }\r\n});\r\n\r\n@Component({\r\n  selector: 'app-order-list',\r\n  templateUrl: './order-list.page.html',\r\n  styleUrls: ['./order-list.page.scss'],\r\n})\r\nexport class OrderListPage implements OnInit, OnDestroy {\r\n\r\n\t/**\r\n\t * Observable com a lista de pedidos do restaurante ou da filial\r\n\t */\r\n  orders$: Observable<Order[]>;\r\n\r\n  /**\r\n   * Lista de pedidos\r\n   */\r\n  orders: Order[];\r\n\r\n  /**\r\n   * Subscription do observable de pedidos\r\n   */\r\n  ordersSubscription: Subscription;\r\n\r\n\t/**\r\n\t * Se está carregando os elementos da página.\r\n\t */\r\n  loading: boolean = true;\r\n\r\n\t/**\r\n\t * Verifica se existe pediddos\r\n\t */\r\n  existsOrders: boolean = true\r\n\r\n\r\n\t/**\r\n\t * Data do input\r\n\t */\r\n  modeFilterDate: string\r\n  dateInput = moment().format();\r\n\r\n\t/**\r\n\t * Data para filtrar os pedidos\r\n\t */\r\n  dateStart: Date = new Date();\r\n  dateEnd: Date;\r\n\r\n\t/**\r\n\t * Valor do Segmento selecionado\r\n\t */\r\n  segment_value: OrderStatus | 'all' = 'all';\r\n  // segment_value: any\r\n\r\n\t/**\r\n\t * Referência dos tipos de status do pedido para ser usado no HTML.\r\n\t */\r\n  get orderStatus(): typeof OrderStatus {\r\n    return OrderStatus;\r\n  }\r\n\r\n\t/**\r\n\t * Input de pesquisa\r\n\t */\r\n  input_search: string\r\n\r\n\r\n  constructor(\r\n    public navCtrl: NavController,\r\n    public authentication: AuthenticationService,\r\n    public shared: SharedService,\r\n    public menuCtrl: MenuController,\r\n    public system: SystemService,\r\n    public alertCtrl: AlertController,\r\n    public modalCtrl: ModalController,\r\n    public loadingCtrl: LoadingController,\r\n    public toastCtrl: ToastController,\r\n    private ref: ChangeDetectorRef,\r\n    private route: ActivatedRoute\r\n  ) { }\r\n\r\n\t/**\r\n\t * Inicializando estruturas após entrar na página.\r\n\t */\r\n  ngOnInit(): void {\r\n    this.modeFilterDate = 'day'\r\n    this.dateFilter(this.dateStart)\r\n\r\n    this.menuCtrl.enable(true);\r\n    this.load();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.ordersSubscription) this.ordersSubscription.unsubscribe()\r\n  }\r\n\r\n  change() {\r\n    this.ref.detectChanges()\r\n  }\r\n\t/**\r\n\t * Carrega a lista da página\r\n\t */\r\n  load() {\r\n    this.loading = true\r\n    this.existsOrders = true\r\n\r\n    if (this.ordersSubscription) this.ordersSubscription.unsubscribe()\r\n    this.ordersSubscription = this.route.paramMap\r\n      .pipe(switchMap((params: ParamMap) => {\r\n        if (params.get('company_id'))\r\n          return Company.object(params.get('company_id'))\r\n        else if (this.shared.isManager || this.shared.isFilialManager)\r\n          return this.shared.company$\r\n        else\r\n          return of(null)\r\n      }))\r\n      .pipe(first())\r\n      .pipe(switchMap((company: Company) => {\r\n        //GERENTE GERAL\r\n        /**\r\n         * @todo fix permissões\r\n         */\r\n        if (this.shared.isManager || this.shared.isTeam) {\r\n          let obj$: Observable<Order[]>\r\n          if (this.shared.isManager || company) {\r\n            obj$ = Company.orders.list(company.id,\r\n              [\r\n                { name: \"created_at\", operator: \">=\", value: this.dateStart },\r\n                { name: \"created_at\", operator: \"<\", value: this.dateEnd }\r\n              ]\r\n              , [\r\n                {\r\n                  name: \"created_at\",\r\n                  type: \"desc\"\r\n                }, {\r\n                  name: \"status\"\r\n                }\r\n              ])\r\n          } else { // Deve ser perfil de TEAM\r\n            obj$ = Order.list(\r\n              [\r\n                { name: \"created_at\", operator: \">=\", value: this.dateStart },\r\n                { name: \"created_at\", operator: \"<\", value: this.dateEnd }\r\n              ]\r\n              , [\r\n                {\r\n                  name: \"created_at\",\r\n                  type: \"desc\"\r\n                }, {\r\n                  name: \"status\"\r\n                }\r\n              ])\r\n          }\r\n          return obj$.pipe(flatMap((orders: Order[]) => {\r\n            if (!orders || orders.length <= 0) return of([])\r\n\r\n            return combineLatest(orders.map((order) => User.object(order.user.id)))\r\n              .pipe(map((users: User[]) => {\r\n                for (let i = 0; i < users.length; i++) {\r\n                  orders[i].user_full = users[i]\r\n                }\r\n                return orders\r\n              }))\r\n              .pipe(flatMap((orders: Order[]) => {\r\n                if (!orders || orders.length <= 0) return of([])\r\n                return combineLatest(orders.map((order) => Filial.object(order.filial.id)))\r\n                  .pipe(map((filials: Filial[]) => {\r\n                    for (let i = 0; i < filials.length; i++) {\r\n                      orders[i].filial_full = filials[i]\r\n                    }\r\n                    return orders\r\n                  }))\r\n              }))\r\n          }))\r\n        }\r\n        //GERENTE DE FILIAL\r\n        else if (this.shared.isFilialManager) {\r\n          return this.shared.filial$.pipe(switchMap((filial: Filial) => {\r\n            return Filial.orders.list(filial.id, [\r\n              { name: \"created_at\", operator: \">=\", value: this.dateStart },\r\n              { name: \"created_at\", operator: \"<\", value: this.dateEnd }\r\n            ]\r\n              , [\r\n                {\r\n                  name: \"created_at\",\r\n                  type: \"desc\"\r\n                }, {\r\n                  name: \"status\"\r\n                }\r\n              ]).pipe(flatMap((orders: Order[]) => {\r\n                if (!orders || orders.length <= 0) return of([])\r\n                return combineLatest(orders.map((order) => User.object(order.user.id)))\r\n                  .pipe(map((users: User[]) => {\r\n                    for (let i = 0; i < users.length; i++) {\r\n                      orders[i].user_full = users[i]\r\n                      orders[i].filial_full = filial\r\n                    }\r\n                    return orders\r\n                  }))\r\n              }))\r\n          }))\r\n        } else {\r\n          const error: Error = Error(\"Página de pedidos só pode ser acessada por Gerente Geral, Gerente de Filial ou TEAM\");\r\n          this.system.showErrorAlert(error);\r\n        }\r\n        return of([])\r\n      }))\r\n      .subscribe((orders: Order[]) => {\r\n        if (!orders || orders.length <= 0) this.existsOrders = false\r\n        else this.existsOrders = true\r\n        console.log(\"Pedidos\", orders)\r\n        this.orders = orders || []\r\n        this.loading = false\r\n        this.ref.detectChanges()\r\n      }, err => {\r\n        this.loading = false\r\n        this.orders = []\r\n        this.ref.detectChanges()\r\n        this.system.showErrorAlert(err);\r\n      })\r\n\r\n  }\r\n\r\n\t/**\r\n\t * Denunciar usuário\r\n\t */\r\n  async reportUser(user) {\r\n\r\n    let confirm = await this.alertCtrl.create({\r\n      header: 'Denunciar usuário',\r\n      message: `Você tem certeza que deseja abrir uma denúncia contra o ${user.name}? Você só deve fazer isso caso o usuário tenha agido de má fé ao realizar o pedido.`,\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar'\r\n        },\r\n        {\r\n          text: 'Confirmar',\r\n          handler: async () => {\r\n            let prompt = await this.alertCtrl.create({\r\n              header: 'Qual o motivo da denúncia?',\r\n              inputs: [\r\n                {\r\n                  name: 'reason',\r\n                  placeholder: 'Descreva o que aconteceu...'\r\n                },\r\n              ],\r\n              buttons: [\r\n                {\r\n                  text: 'Cancelar'\r\n                },\r\n                {\r\n                  text: 'Confirmar',\r\n                  handler: data => {\r\n                    if (!user.denunciations) {\r\n                      user.denunciations = [];\r\n                      user.hasDenunciation = true;\r\n                    }\r\n                    user.denunciations.push(data.reason);\r\n                    let userObj: User = {};\r\n                    userObj.denunciations = user.denunciations;\r\n                    User.update(user.id, userObj).subscribe(async (res) => {\r\n                      let toast = await this.toastCtrl.create({\r\n                        message: 'Sua denúncia foi encaminhada com sucesso',\r\n                        duration: 1500\r\n                      });\r\n                      toast.present();\r\n                    })\r\n                  }\r\n                }\r\n              ]\r\n            });\r\n            prompt.present();\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    confirm.present();\r\n  }\r\n\r\n\r\n  async refusedChangeStatus(order: Order) {\r\n    let alert = await this.alertCtrl.create({\r\n      header: 'Tem certeza que deseja cancelar o pedido?',\r\n      inputs: [{\r\n        name: 'reason',\r\n        placeholder: 'Por favor, informe o motivo.',\r\n        type: 'text',\r\n      }],\r\n      buttons: [\r\n        {\r\n          text: 'Não',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Confirmar',\r\n          handler: (data) => {\r\n            this.changeStatus(order, false, data.reason);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    alert.present();\r\n  }\r\n  \r\n\t/**\r\n\t * Altera o status do pedido\r\n\t */\r\n  async changeStatus(order: Order, refused?: boolean, reason?: string) {\r\n    let text: string;\r\n    let new_status: {\r\n      status?: OrderStatus,\r\n      accepted_at?: Date | firestore.FieldValue,\r\n      doing_at?: Date | firestore.FieldValue,\r\n      delivery_at?: Date | firestore.FieldValue,\r\n      done_at?: Date | firestore.FieldValue,\r\n      refused_at?: Date | firestore.FieldValue\r\n    } = {}\r\n    if (refused === false) {\r\n      // new_status.status = OrderStatus.refused;\r\n      // new_status.refused_at = new Date()\r\n      // updateObject.new_status = new_status;\r\n      // text = \"Confirma alterar status para RECUSADO?\";\r\n      Order.update<Order>(order.id, {\r\n        cancellation_reason: reason,\r\n        status: OrderStatus.refused,\r\n        refused_at: firestore.FieldValue.serverTimestamp()\r\n      }).subscribe((res) => {\r\n      }, error => {\r\n        console.error(\"Deu errado\", error);\r\n      });\r\n      return;\r\n    } else if (order.status === OrderStatus.delivery) {\r\n      new_status.status = OrderStatus.done;\r\n      new_status.done_at = firestore.FieldValue.serverTimestamp()\r\n      text = \"Confirma alterar status para CONCLUÍDO?\";\r\n    } else if (order.status === OrderStatus.accepted) {\r\n      new_status.status = OrderStatus.delivery;\r\n      new_status.delivery_at = firestore.FieldValue.serverTimestamp()\r\n      text = \"Confirma alterar status para SAIU PARA ENTREGA?\";\r\n    } else if (order.status === OrderStatus.created) {\r\n      new_status.status = OrderStatus.accepted;\r\n      new_status.accepted_at = firestore.FieldValue.serverTimestamp()\r\n      text = \"Confirma alterar status para ACEITO?\";\r\n    }\r\n    if (new_status.status === OrderStatus.refused) {\r\n      let alert = await this.alertCtrl.create({\r\n        header: 'Tem certeza que deseja cancelar o pedido?',\r\n        inputs: [{\r\n          name: 'reason',\r\n          placeholder: 'Por favor, informe o motivo.',\r\n          type: 'text',\r\n        }],\r\n        buttons: [\r\n          {\r\n            text: 'Não',\r\n            role: 'cancel'\r\n          },\r\n          {\r\n            text: 'Confirmar',\r\n            handler: async (data) => {\r\n              let load = await this.loadingCtrl.create();\r\n              load.present()\r\n              if (order) {\r\n                Order.update<Order>(order.id, {\r\n                  cancellation_reason: data.reason,\r\n                  status: OrderStatus.refused,\r\n                  incomplete_at: firestore.FieldValue.serverTimestamp()\r\n                }).subscribe(() => {\r\n                  load.dismiss()\r\n                }, err => {\r\n                  this.system.showErrorAlert(err)\r\n                });\r\n              } else {\r\n                load.dismiss()\r\n                this.system.showErrorAlert(Error(\"Pedido inválido\"))\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      });\r\n      alert.present();\r\n    } else {\r\n      let alert = await this.alertCtrl.create({\r\n        header: 'Alerta',\r\n        message: text,\r\n        buttons: [\r\n          {\r\n            text: 'Não'\r\n          },\r\n          {\r\n            text: 'Sim',\r\n            handler: () => {\r\n              Order.update(order.id, new_status).subscribe();\r\n              this.load()\r\n            }\r\n          }\r\n        ]\r\n      })\r\n      alert.present();\r\n    }\r\n  }\r\n\r\n  changeOrders() {\r\n    this.dateFilter(this.dateInput)\r\n    this.load()\r\n  }\r\n\r\n  changeModeFilterDate(mode: 'day' | 'month') {\r\n    this.modeFilterDate = mode\r\n    let newDate = new Date()\r\n    if (mode == 'month') {\r\n      newDate.setDate(1)\r\n    } else {\r\n      this.dateInput = moment().format()\r\n    }\r\n    this.dateFilter(newDate)\r\n    this.load()\r\n  }\r\n\r\n  dateFilter(date) {\r\n    this.dateStart = new Date(date)\r\n    this.dateStart.setHours(0, 0, 0)\r\n    this.dateEnd = new Date(this.dateStart)\r\n    if (this.modeFilterDate == 'month') {\r\n\r\n      let aux = this.dateStart.getMonth()\r\n      this.dateStart.setDate(1)\r\n      if (aux == 12) {\r\n        this.dateEnd.setMonth(1)\r\n      } else {\r\n        this.dateEnd.setMonth(aux + 1)\r\n      }\r\n\r\n    } else {\r\n      this.dateEnd.setDate(this.dateEnd.getDate() + 1)\r\n    }\r\n    //console.log(\"DATE END: \", this.dateEnd)\r\n\r\n  }\r\n\r\n  doInfinite(): Promise<any> {\r\n    return new Promise((resolve) => {\r\n      resolve();\r\n    })\r\n  }\r\n\r\n  actualDateFormated() {\r\n    let data = new Date();\r\n    let sDay = ''\r\n    let sMonth = ''\r\n    let dia = data.getDate();\r\n    if (dia.toString().length == 1)\r\n      sDay = \"0\" + dia\r\n    let mes = data.getMonth() + 1;\r\n    if (mes.toString().length == 1)\r\n      sMonth = \"0\" + mes\r\n    let year = data.getFullYear();\r\n    return sDay + \"/\" + sMonth + \"/\" + year;\r\n  }\r\n\r\n\t/**\r\n\t * Verifica se o dia é:\r\n\t * Hoje = retornando 1\r\n\t * Ontem = retoranndo 2\r\n\t * Caso nenhum dos dos = retornando 3\r\n\t * @param day\r\n\t */\r\n  verifyDate(day: String) {\r\n    let data = new Date();\r\n    let sDay = ''\r\n    let sMonth = ''\r\n    let dia = data.getDate();\r\n    if (dia.toString().length == 1)\r\n      sDay = \"0\" + dia\r\n    let mes = data.getMonth() + 1;\r\n    if (mes.toString().length == 1)\r\n      sMonth = \"0\" + mes\r\n    let year = data.getFullYear();\r\n\r\n    let formattedDate = sDay + \"/\" + sMonth + \"/\" + year;\r\n    if (formattedDate == day) {\r\n      return '1'\r\n    } else {\r\n\r\n      if (dia == (parseInt(day.substring(0, 2)) + 1)) {\r\n        return '2'\r\n      } else {\r\n        return '3'\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  getLabelDay(day: String) {\r\n\r\n    let resultDate: String = ''\r\n\r\n    switch (this.verifyDate(day)) {\r\n      case '1':\r\n        resultDate = \"Hoje\"\r\n        break\r\n      case '2':\r\n        resultDate = \"Ontem\"\r\n        break\r\n      case '3':\r\n        resultDate = day\r\n        break\r\n    }\r\n\r\n    return resultDate\r\n  }\r\n\r\n\t/**\r\n\t * Modal que detalha o pedido\r\n\t */\r\n  async presentModal(order: Order) {\r\n    let modal = await this.modalCtrl.create({\r\n      component: OrderDetailPage,\r\n      componentProps: {\r\n        order: order\r\n      }\r\n    });\r\n    modal.present();\r\n  }\r\n}\r\n"],"sourceRoot":""}