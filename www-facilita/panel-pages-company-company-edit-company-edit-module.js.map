{"version":3,"sources":["webpack:///./src/app/panel/pages/company/company-edit/company-edit.module.ts","webpack:///./src/app/panel/pages/company/company-edit/company-edit.page.html","webpack:///./src/app/panel/pages/company/company-edit/company-edit.page.scss","webpack:///./src/app/panel/pages/company/company-edit/company-edit.page.ts"],"names":[],"mappings":"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","file":"panel-pages-company-company-edit-company-edit-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { CompanyEditPage } from './company-edit.page';\r\nimport { PanelComponentsModule } from '../../../components/panel-components.module';\r\nimport { GlobalComponentsModule } from '../../../../components/global-components.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CompanyEditPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    PanelComponentsModule,\r\n    GlobalComponentsModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [CompanyEditPage]\r\n})\r\nexport class CompanyEditPageModule {}\r\n","module.exports = \"<ion-header no-border>\\r\\n  <nano-navbar title=\\\"Configurações da empresa\\\" icon=\\\"menus-icon-settings-gear\\\"></nano-navbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content padding>\\r\\n  <ion-card class=\\\"content-card\\\">\\r\\n    <nano-loading [loading]=\\\"loading\\\">\\r\\n      <form [formGroup]=\\\"form\\\" class=\\\"form-content\\\">\\r\\n        <ion-list>\\r\\n\\r\\n          <!-- Informações da empresa -->\\r\\n          <ion-item-divider color=\\\"light\\\">\\r\\n            <h3 ion-text>Informações da empresa</h3>\\r\\n          </ion-item-divider>\\r\\n\\r\\n          <!--Nome-->\\r\\n          <ion-item padding-horizontal>\\r\\n            <ion-label position=\\\"stacked\\\" color=\\\"tertiary\\\">Nome</ion-label>\\r\\n            <ion-input formControlName=\\\"name\\\" maxlength=\\\"50\\\"></ion-input>\\r\\n          </ion-item>\\r\\n\\r\\n          <!-- Ativar ou desativar a empresa -->\\r\\n          <ion-item padding-horizontal *ngIf=\\\"isTEAM\\\">\\r\\n            <ion-label>Empresa ativa</ion-label>\\r\\n            <ion-checkbox formControlName=\\\"active\\\"></ion-checkbox>\\r\\n          </ion-item>\\r\\n          <h4>Configurações do menu lateral</h4>\\r\\n          <p>Essas opções não impedem os usuários de verem a empresa no setor de delivery ou no setor de promoção</p>\\r\\n          <p>São apenas para o controle do que é visível no menu lateral. Muito cuidado ao desativar delivery de uma empresa que possui filiais de delivery abertas em produção.</p>\\r\\n          <!-- Ativar ou desativar a empresa -->\\r\\n          <ion-item padding-horizontal>\\r\\n            <ion-label>Essa empresa faz delivery?</ion-label>\\r\\n            <ion-checkbox formControlName=\\\"delivery\\\"></ion-checkbox>\\r\\n          </ion-item>\\r\\n\\r\\n          <!-- Ativar ou desativar a empresa -->\\r\\n          <ion-item padding-horizontal>\\r\\n            <ion-label>Essa empresa faz promoções?</ion-label>\\r\\n            <ion-checkbox formControlName=\\\"promotion\\\"></ion-checkbox>\\r\\n          </ion-item>\\r\\n\\r\\n          <!-- Taxa específica a ser cobrada pelo restaurante -->\\r\\n          <!-- <ion-item padding-horizontal *ngIf=\\\"isTEAM\\\">\\r\\n            <ion-label stacked color=\\\"tertiary\\\">Taxa</ion-label>\\r\\n            <money-input item-content [control]=\\\"form.controls['tax']\\\"></money-input>\\r\\n          </ion-item> -->\\r\\n\\r\\n          <nano-buttons\\r\\n            [cancel]=\\\"cancel.bind(this)\\\"\\r\\n            [canSave]=\\\"form.valid\\\"\\r\\n            [save]=\\\"save.bind(this)\\\"\\r\\n            [canRemove]=\\\"company && isTEAM\\\"\\r\\n            [remove]=\\\"remove.bind(this)\\\"></nano-buttons>\\r\\n\\r\\n        </ion-list>\\r\\n      </form>\\r\\n    </nano-loading>\\r\\n  </ion-card>\\r\\n</ion-content>\"","module.exports = \"h4 {\\n  margin-left: 1.5em; }\\n\\np {\\n  margin-left: 2.2em;\\n  line-height: 1em; }\\n\"","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Company } from '../../../../../models/company';\r\nimport { NavController, MenuController } from '@ionic/angular';\r\nimport { SharedService } from '../../../../services/shared.service';\r\nimport { SystemService } from '../../../../services/system.service';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { switchMap, tap, first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-company-edit',\r\n  templateUrl: './company-edit.page.html',\r\n  styleUrls: ['./company-edit.page.scss'],\r\n})\r\nexport class CompanyEditPage implements OnInit {\r\n\r\n  /**\r\n   * Formulário\r\n   */\r\n  form: FormGroup\r\n\r\n  /**\r\n   * Carregando a página\r\n   */\r\n  loading: boolean = true\r\n\r\n  /**\r\n   * Dados da empresa a ser editada\r\n   */\r\n  company: Company // undefined se for página de cadastro\r\n\r\n  constructor(private navCtrl: NavController,\r\n    private formBuilder: FormBuilder,\r\n    private shared: SharedService,\r\n    private menuCtrl: MenuController,\r\n    private route: ActivatedRoute,\r\n    public ref: ChangeDetectorRef,\r\n    private system: SystemService) { }\r\n\r\n  get isTEAM(): boolean {\r\n    return this.shared.isTeam\r\n  }\r\n\r\n  /**\r\n   * Inicializando estruturas após entrar na página.\r\n   */\r\n  ngOnInit(): void {\r\n\r\n    this.form = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      active: [false],\r\n      delivery: [true],\r\n      promotion: [true]\r\n    })\r\n\r\n    this.form.valueChanges.subscribe(() => {\r\n      this.ref.detectChanges()\r\n    })\r\n\r\n    this.menuCtrl.enable(true)\r\n    this.loading = true\r\n\r\n    //Obter dados do objeto selecionado para edição (caso houver)\r\n    this.route.paramMap.\r\n      pipe(switchMap((params: ParamMap) => {\r\n        if (params.get('id'))\r\n          return Company.object(params.get('id'))\r\n        else\r\n          return of(null)\r\n      }))\r\n      .pipe(first())\r\n      .subscribe((company: Company) => {\r\n        this.company = company\r\n        if (this.company) {\r\n          this.form.patchValue(this.company);\r\n        }\r\n        this.loading = false\r\n      }, err => {\r\n        this.loading = false\r\n        this.system.showErrorAlert(err);\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Voltar página sem salvar alterações\r\n   */\r\n  cancel(): void {\r\n    this.navCtrl.navigateRoot('company/list');\r\n  }\r\n\r\n  /**\r\n   * Remove empresa do database\r\n   */\r\n  remove(): Observable<any> {\r\n    return throwError(new Error(\"Esse método não foi implementado\"))\r\n    /**\r\n     * @todo desativar logins do proprietário e funcionários\r\n     * @todo retirar o empresa da lista de exibição da aplicação,\r\n     * mas permanecer com todos os seus dados e seus relacionamentos\r\n     */\r\n  }\r\n\r\n  /**\r\n   * Salvar alterações e redirecionar para página anterior\r\n   */\r\n  save(): Observable<any> {\r\n    //Atualizar usuário e autenticação\r\n    if (this.company) {\r\n      return Company.update(this.company.id, this.form.value)\r\n        .pipe(tap(() => {\r\n          if (this.shared.isManager)\r\n            this.shared.company$.next(this.company)\r\n        }))\r\n        .pipe(tap(() => {\r\n          this.cancel()\r\n        }))\r\n    }\r\n    //Página de registro, criar novo objeto no database\r\n    else {\r\n      return Company.add(this.form.value)\r\n        .pipe(tap(() => {\r\n          this.cancel()\r\n        }))\r\n    }\r\n  }\r\n}"],"sourceRoot":""}