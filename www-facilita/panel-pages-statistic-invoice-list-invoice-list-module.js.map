{"version":3,"sources":["webpack:///./src/app/panel/pages/statistic/invoice-list/invoice-list.module.ts","webpack:///./src/app/panel/pages/statistic/invoice-list/invoice-list.page.html","webpack:///./src/app/panel/pages/statistic/invoice-list/invoice-list.page.scss","webpack:///./src/app/panel/pages/statistic/invoice-list/invoice-list.page.ts"],"names":[],"mappings":"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","file":"panel-pages-statistic-invoice-list-invoice-list-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { InvoiceListPage } from './invoice-list.page';\r\nimport { PanelComponentsModule } from '../../../components/panel-components.module';\r\nimport { GlobalComponentsModule } from '../../../../components/global-components.module';\r\nimport { NgPipesModule } from 'ngx-pipes';\r\nimport { PipesModule } from '../../../../pipes/pipes.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: InvoiceListPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    PanelComponentsModule,\r\n    GlobalComponentsModule,\r\n    NgPipesModule,\r\n    PipesModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [InvoiceListPage]\r\n})\r\nexport class InvoiceListPageModule { }\r\n","module.exports = \"<ion-header no-border>\\r\\n  <nano-navbar title=\\\"Fatura\\\" icon=\\\"menus-icon-credit-card\\\">\\r\\n  </nano-navbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content padding>\\r\\n  <nano-loading [loading]=\\\"loading\\\">\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col col6 *ngFor=\\\"let item of invoices; let i = index\\\" class=\\\"content-month\\\" no-padding>\\r\\n          <ion-list no-padding>\\r\\n            <span class=\\\"month-title\\\" ion-text padding>{{item.id_name}}</span>\\r\\n            <ion-item no-lines>\\r\\n              <div>\\r\\n                <h5 ion-text text-wrap no-margin>\\r\\n                  <strong> Comissão </strong>\\r\\n                </h5>\\r\\n                <p ion-text text-wrap no-margin class=\\\"description\\\">Foi vendido <strong>R$ {{item.sales}}</strong> e a taxa de comissão é <strong>{{(item.fee*100) | number : '1.0-1'}}%</strong></p>\\r\\n              </div>\\r\\n              <h5 ion-text item-right text-wrap class=\\\"green\\\" slot=\\\"end\\\">\\r\\n                <strong> R$ {{(item.sales * item.fee ) | number : '1.2-2'}}</strong>\\r\\n              </h5>\\r\\n            </ion-item>\\r\\n            <ion-item no-lines>\\r\\n              <div>\\r\\n                <h5 ion-text text-wrap no-margin>\\r\\n                  <strong> Mensalidade </strong>\\r\\n                </h5>\\r\\n                <p ion-text text-wrap no-margin class=\\\"description\\\">O valor da mensalidade é <strong>{{item.monthly_payment}}</strong> e\\r\\n                  foi passado <strong>{{(item.days*100) | number : '1.0-1'}}%</strong> do mês.</p>\\r\\n              </div>\\r\\n              <h5 ion-text item-right text-wrap slot=\\\"end\\\">\\r\\n                <strong> R$ {{(item.monthly_payment * item.days ) | number : '1.2-2'}}</strong>\\r\\n              </h5>\\r\\n            </ion-item>\\r\\n            <ion-item no-lines>\\r\\n              <div>\\r\\n                <h5 ion-text text-wrap no-margin>\\r\\n                  <strong> Fatura a ser paga </strong>\\r\\n                </h5>\\r\\n                <p ion-text text-wrap no-margin class=\\\"description\\\">O maior valor entre a mensalidade e a comissão.</p>\\r\\n              </div>\\r\\n              <h5 ion-text item-right text-wrap slot=\\\"end\\\">\\r\\n                <strong> R$ {{item.total | number : '1.2-2'}}</strong>\\r\\n              </h5>\\r\\n            </ion-item>\\r\\n          </ion-list>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n\\r\\n    <ion-card class=\\\"content-card\\\" text-center padding *ngIf=\\\"!existsInvoice\\\">\\r\\n      <p>Você ainda não possui faturas</p>\\r\\n    </ion-card>\\r\\n\\r\\n  </nano-loading>\\r\\n</ion-content>\"","module.exports = \".content-month {\\n  --background: white;\\n  background: white;\\n  min-width: 278px;\\n  margin: 10px;\\n  box-shadow: 1px 1px 10px #ccc; }\\n  .content-month h2.text {\\n    margin-top: 0px !important; }\\n  .content-month .month-title {\\n    background: var(--ion-color-primary);\\n    text-transform: capitalize;\\n    color: white;\\n    display: block;\\n    text-align: center;\\n    font-size: 20px; }\\n  .content-month .info {\\n    padding: 10px;\\n    display: flex;\\n    justify-content: space-between;\\n    border-bottom: 0.55px solid #ddd; }\\n  .content-month .info:last-child {\\n      border: none; }\\n  .content-month .info .info-name {\\n      width: 75%; }\\n  .content-month .info .info-value {\\n      white-space: nowrap;\\n      display: flex;\\n      align-items: center; }\\n  ion-item {\\n  --background: white;\\n  padding-top: 20px; }\\n  ion-list {\\n  --background: white;\\n  background: white;\\n  margin-bottom: 20px; }\\n  .green {\\n  color: var(--ion-color-success-shade); }\\n  .description {\\n  color: var(--ion-color-medium-shade); }\\n\"","import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { Subscription, of, combineLatest } from 'rxjs';\r\nimport { MenuController, NavController } from '@ionic/angular';\r\nimport { SharedService } from '../../../../services/shared.service';\r\nimport { SystemService } from '../../../../services/system.service';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { AuthenticationService } from '../../../../services/authentication.service';\r\nimport { switchMap, first, map } from 'rxjs/operators';\r\nimport { Company } from '../../../../../models/company';\r\nimport { Filial } from '../../../../../models/filial';\r\nimport * as moment from 'moment';\r\nimport { Invoice } from '../../../../../models/invoice';\r\n\r\n@Component({\r\n  selector: 'app-invoice-list',\r\n  templateUrl: './invoice-list.page.html',\r\n  styleUrls: ['./invoice-list.page.scss'],\r\n})\r\nexport class InvoiceListPage implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Se está carregando os elementos da página\r\n   */\r\n  loading: boolean = true\r\n\r\n  /**\r\n   * Se existe alguma fatura\r\n   */\r\n  existsInvoice: boolean = true\r\n\r\n  invoicesSubscription: Subscription\r\n\r\n  company: Company\r\n\r\n  filial: Filial\r\n\r\n  invoices: (Invoice & { id_name?: string })[]\r\n\r\n  constructor(public menuCtrl: MenuController,\r\n    public shared: SharedService,\r\n    public system: SystemService,\r\n    private ref: ChangeDetectorRef,\r\n    public route: ActivatedRoute,\r\n    public authentication: AuthenticationService,\r\n    public navCtrl: NavController) { }\r\n\r\n  /**\r\n\t * Inicializando estruturas após entrar na página.\r\n\t */\r\n  ngOnInit(): void {\r\n    this.menuCtrl.enable(true);\r\n    this.load();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.invoicesSubscription) this.invoicesSubscription.unsubscribe()\r\n  }\r\n\r\n\t/**\r\n\t * Carrega a lista da página\r\n\t */\r\n  load() {\r\n    this.loading = true\r\n    this.existsInvoice = true\r\n\r\n    let company$ = this.route.paramMap\r\n      .pipe(switchMap((params: ParamMap) => {\r\n        if (params.get('company_id'))\r\n          return Company.object(params.get('company_id'))\r\n        else\r\n          return of(null)\r\n      }))\r\n\r\n    let filial$ = this.route.paramMap\r\n      .pipe(switchMap((params: ParamMap) => {\r\n        if (params.get('filial_id'))\r\n          return Filial.object(params.get('filial_id'))\r\n        else\r\n          return of(null)\r\n      }))\r\n\r\n    if (this.invoicesSubscription) this.invoicesSubscription.unsubscribe()\r\n    this.invoicesSubscription = combineLatest([\r\n      company$,\r\n      filial$,\r\n    ])\r\n      .pipe(map((arr: [Company, Filial]) => {\r\n        this.company = arr[0]\r\n        this.filial = arr[1]\r\n        return this.filial\r\n      }))\r\n      .pipe(switchMap((filial: Filial) => {\r\n        return Filial.invoices.list(filial.id)\r\n      })).subscribe((invoices: Invoice[]) => {\r\n        if (!invoices || invoices.length <= 0) this.existsInvoice = false\r\n        else this.existsInvoice = true\r\n        this.invoices = invoices\r\n        for (let invoice of this.invoices) {\r\n          invoice.id_name = this.getStringMonth(invoice.month.split('-')[1])\r\n        }\r\n        this.loading = false\r\n        this.ref.detectChanges()\r\n      }, err => {\r\n        this.loading = false\r\n        this.ref.detectChanges()\r\n        this.system.showErrorAlert(err);\r\n\r\n      })\r\n  }\r\n\r\n  getStringMonth(id: string) {\r\n    moment.locale('pt-BR');\r\n    return moment({ month: Number(id) - 1 }).format('MMMM')\r\n  }\r\n}\r\n"],"sourceRoot":""}